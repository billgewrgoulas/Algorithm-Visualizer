{"version":3,"sources":["./src/app/globalVar.ts","./src/app/topbar/topbar.component.ts","./src/app/topbar/topbar.component.html","./src/app/services/observers.service.ts","./src/environments/environment.ts","./src/app/mazeAlgos/recursiveDiv.ts","./src/app/pathFindAlgos/BFS.ts","./src/app/pathFindAlgos/nra.ts","./src/app/mazeAlgos/edge.ts","./src/app/grid/grid.component.ts","./src/app/grid/grid.component.html","./src/app/grid/cell.ts","./src/app/pathFindAlgos/UCS.ts","./src/app/services/top-k.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/grid/node.ts","./src/app/mazeAlgos/recursiveBacktracker.ts","./src/app/app.module.ts","./src/app/pathFindAlgos/Astar.ts","./src/app/mazeAlgos/primsAlgorithm.ts","./src/app/pathFindAlgos/fightTheAlgo.ts","./src/app/grid/builder.ts","./src/app/pathFindAlgos/DFS.ts","./src/app/mazeAlgos/AldousBroder.ts","./src/app/services/pathfind.service.ts","./src/app/app-routing.module.ts","./src/app/services/mazes.service.ts","./src/app/mazeAlgos/kruskalsAlgorithm.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["export class State {\r\n  public static inProgress: boolean = false;\r\n  public static type: string = '';\r\n  public static points: number[][] = [];\r\n  public static fightR: boolean = false;\r\n}\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { State } from '../globalVar';\nimport { Builder } from '../grid/builder';\nimport { Cell } from '../grid/cell';\nimport { MazesService } from '../services/mazes.service';\nimport { ObserversService } from '../services/observers.service';\nimport { PathfindService } from '../services/pathfind.service';\nimport { TopKService } from '../services/top-k.service';\n\n@Component({\n  selector: 'app-topbar',\n  templateUrl: './topbar.component.html',\n  styleUrls: ['./topbar.component.css'],\n})\nexport class TopbarComponent implements OnInit, OnDestroy {\n  public options: boolean[] = [true, false, false, false, false];\n  private algos: string[] = [\n    'Visualize Astar',\n    'Visualize BFS',\n    'Visualize DFS',\n    'Visualize UCS',\n    'Visualize NRA',\n    'Fight the Algorithm',\n  ];\n  private index: any = 0;\n  private observers: Subscription[] = [];\n  private grid: Cell[][] = [];\n  private mazeService?: MazesService;\n  private pathService?: PathfindService;\n  private topkService?: TopKService;\n  private builder: Builder = new Builder();\n  private opt: number = 0;\n  public pathFind: string = 'Visualize';\n\n  constructor(private share: ObserversService) {}\n\n  ngOnInit(): void {\n    this.share.changeOpt(2);\n    this.observers.push(\n      this.share.prstart.subscribe(() => {\n        this.start();\n      }),\n      this.share.grid.subscribe((g: Cell[][]) => {\n        this.grid = g;\n        this.mazeService = new MazesService(this.grid);\n        this.pathService = new PathfindService(this.grid);\n        this.topkService = new TopKService(this.grid);\n      })\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.observers.forEach((observer) => {\n      observer.unsubscribe();\n    });\n  }\n\n  public walls() {\n    this.options[this.index] = false;\n    this.options[1] = true;\n    this.index = 1;\n    this.share.changeOpt(0);\n  }\n\n  public clear(opt: number) {\n    this.options[this.index] = false;\n    this.options[2] = true;\n    this.index = 2;\n    if (opt == 1) {\n      this.mazeService?.clear();\n    } else if (opt == 2) {\n      this.mazeService?.clearPathAndPoints();\n    } else if (opt == 3) {\n      this.mazeService?.clearPath();\n    } else if (opt == 4) {\n      this.mazeService?.clearWalls();\n    }\n\n    if (State.type == 'f') {\n      this.fight();\n    }\n  }\n\n  public start() {\n    this.options[this.index] = false;\n    this.options[0] = true;\n    this.index = 0;\n    this.share.changeOpt(2);\n  }\n\n  public visualize() {\n    if (State.inProgress || State.fightR) {\n      return;\n    }\n\n    if (State.type == '') {\n      confirm('choose algorithm');\n      return;\n    }\n\n    if (State.type == 'f') {\n      this.share.initAlgo();\n      return;\n    }\n\n    this.options[this.index] = false;\n    this.options[3] = true;\n    this.index = 3;\n\n    //check if points were choosen properly\n    if (State.points.length < 2) {\n      if (State.type == 'sp') {\n        confirm('select two points!!');\n      } else {\n        confirm('select two or more points!!');\n      }\n      this.start();\n      return;\n    }\n    let ids: number[] = [];\n    State.points.forEach((s: number[]) => {\n      let id = this.grid[s[0]][s[1]].id;\n      ids.push(id);\n    });\n\n    this.mazeService?.clearPath();\n\n    //construct the graph and choose algorithm\n    let graph = this.builder.buildgraph(this.grid);\n    if (State.type == 'sp') {\n      this.pathService?.chooseAlgo(this.opt, graph, ids[0], ids[1]);\n    } else {\n      this.topkService?.chooseAlgo(this.opt, graph, ids);\n    }\n  }\n\n  public mazes(opt: number) {\n    this.mazeService?.mazePicker(opt);\n  }\n\n  public pathFinding(opt: number) {\n    if (State.type != 'sp') {\n      this.mazeService?.clearPath();\n    }\n    if (State.points.length > 2) {\n      State.points = [];\n      this.mazeService?.clearPathAndPoints();\n    }\n    if (State.type == 'f') {\n      this.mazeService?.clear();\n    }\n    this.opt = opt;\n    this.pathFind = this.algos[opt - 1];\n    State.type = 'sp';\n    this.share.changeOpt(2);\n  }\n\n  public topKq(o: number) {\n    if (State.type != 'pf') {\n      this.mazeService?.clearPath();\n    }\n    if (State.type == 'f') {\n      this.mazeService?.clear();\n    }\n    this.opt = o;\n    this.pathFind = this.algos[o - 1];\n    State.type = 'pf';\n    this.share.changeOpt(2);\n  }\n\n  public fight() {\n    this.pathFind = this.algos[5];\n    State.type = 'f';\n    State.points = [];\n    this.mazeService?.clear();\n    this.share.changeOpt(10);\n  }\n}\n","<div class=\"navbar\">\n  <div class=\"welcome\">\n    <h1>PathFinding Visualizer</h1>\n  </div>\n  <div class=\"options\">\n    <div (click)=\"start()\" [class.marked]=\"options[0]\">Set Points</div>\n    <div (click)=\"walls()\" [class.marked]=\"options[1]\">Draw Walls</div>\n    <div class=\"mazes\">\n      Mazes\n      <div class=\"dropdown\">\n        <div (click)=\"mazes(1)\">Recursive Division</div>\n        <div (click)=\"mazes(2)\">Recursive Backtracker</div>\n        <div (click)=\"mazes(3)\">Random Kruskal</div>\n        <div (click)=\"mazes(4)\">Random Prim</div>\n        <div (click)=\"mazes(5)\">Aldous-Broder</div>\n      </div>\n    </div>\n    <div class=\"mazes\">\n      Algorithms\n      <div class=\"dropdown pos\">\n        <div (click)=\"pathFinding(1)\">Astar</div>\n        <div (click)=\"pathFinding(2)\">Breadth First Search</div>\n        <div (click)=\"pathFinding(3)\">Depth First Search</div>\n        <div (click)=\"pathFinding(4)\">Uniform Cost Search</div>\n        <div (click)=\"topKq(5)\">Optimal Meeting Point</div>\n        <div (click)=\"fight()\">Fight the algorithm!</div>\n      </div>\n    </div>\n    <div class=\"mazes\" [class.marked]=\"options[2]\">\n      Clear\n      <div class=\"dropdown\">\n        <div (click)=\"clear(1)\">Clear Board</div>\n        <div (click)=\"clear(3)\">Clear Path</div>\n        <div (click)=\"clear(4)\">Clear Walls</div>\n        <div (click)=\"clear(2)\">Clear Paths and Points</div>\n      </div>\n    </div>\n    <div (click)=\"visualize()\" [class.marked]=\"options[3]\">\n      {{ pathFind }}\n    </div>\n    <div\n      data-toggle=\"modal\"\n      onclick=\"firstSlide()\"\n      data-target=\"#exampleModalCenter\"\n    >\n      Guide\n    </div>\n  </div>\n</div>\n\n<!-- Modal -->\n<div\n  class=\"modal fade\"\n  id=\"exampleModalCenter\"\n  tabindex=\"-1\"\n  role=\"dialog\"\n  aria-labelledby=\"exampleModalCenterTitle\"\n  aria-hidden=\"true\"\n>\n  <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-body\" style=\"max-height: 350px\">\n        <div class=\"w3-content w3-display-container\">\n          <div class=\"wrapper\">\n            <button class=\"btn btn-primary\" onclick=\"plusDivs(-1)\">\n              &#10094;\n            </button>\n\n            <div class=\"w3-display-container mySlides\">\n              <div class=\"content\">\n                <h1>Drawing Walls</h1>\n                <p>\n                  You can draw walls by selecting the option on the navbar and\n                  then clicking and hovering on the grid. Click again to stop\n                  drawing. A wall can not go over any other special point.\n                </p>\n                <img class=\"preview\" src=\"assets/walls.gif\" />\n              </div>\n            </div>\n\n            <div class=\"w3-display-container mySlides\">\n              <div class=\"content\">\n                <h1>Welcome!!</h1>\n                <p class=\"h\">\n                  Welcome to the Path Finding Visualizer!. In this project you\n                  can see in action various algorithms for path finding and\n                  perfect maze generation!.\n                  <br /><br />\n                  For the visualization a 2D grid graph was used and each\n                  movement can have a vertical or a horizontal direction.\n                  Moreover a node can have up to 4 neighbors, and the cost of\n                  each edge is 1.\n                </p>\n              </div>\n            </div>\n\n            <div class=\"w3-display-container mySlides\">\n              <div class=\"content\">\n                <h1>Maze Generation</h1>\n                <p>\n                  You can generate mazes by selecting an algorithm from the\n                  Mazes dropdown menu. Note that you can't generate mazes when\n                  the Fight the algorithm option is selected.\n                </p>\n                <img class=\"preview\" src=\"assets/mazes.gif\" />\n              </div>\n            </div>\n\n            <div class=\"w3-display-container mySlides\">\n              <div class=\"content\">\n                <h1>PathFinding Algorithms</h1>\n                <p class=\"h\">\n                  A*: A modified version of dijkstra's algorithm that chooses\n                  the best node to visit based on an heuristic function.\n                  <br /><br />BFS/DFS: BFS starts exploring all nodes from the\n                  closest to the furthest away nodes and guarantees the shortest\n                  path. DFS on the other hand starts from the furthest away\n                  nodes and does not guarantee the shortest path.\n                  <br /><br />Uniform Cost Search: The algorithm starts with a\n                  priority queue that contains only one item, and inserts new\n                  items as they are discovered.\n                </p>\n                <img class=\"preview\" src=\"assets/astar.gif\" />\n              </div>\n            </div>\n\n            <div class=\"w3-display-container mySlides\">\n              <div class=\"content\">\n                <h1>Best Meeting Point</h1>\n                <p>\n                  For this problem a combination of Non Random Access algorithm\n                  and an incremental version of Dijkstra's algorithhm was used.\n                  NRA is an algorithm used for topK queries and in this case we\n                  will be doing a top1 query. Each time the algorithm gets the\n                  next closest node from every starting node and checks if every\n                  starting node has reached one of those next closest nodes,\n                  updating the minimum distance as well as the maximum. If a\n                  node has been visited by all the starting nodes it is compared\n                  with the previous meeting point based on the maximum distance.\n                  The result is a node that has the minimum maximum distance.\n                  Due to the nature of NRA the worst case is O(k(V + ElogV)).\n                  However if the starting nodes are close the algorithm will\n                  terminate very fast. Up to ten points can be selected and you\n                  can also add walls or mazes to see the algorithm in action.\n                </p>\n                <img class=\"preview\" src=\"assets/nra.gif\" />\n              </div>\n            </div>\n\n            <div class=\"w3-display-container mySlides\">\n              <div class=\"content\">\n                <h1>Fight the algorithm!</h1>\n                <p class=\"h\">\n                  For this problem Astar was used. Since the process is a\n                  separate thread it is possible to draw walls while the\n                  algorithm is running and redirect it to find the next closest\n                  path.You can drag and drop the end point to a different\n                  location or just click on the grid to move it around.\n                </p>\n                <img class=\"preview\" src=\"assets/fight.gif\" />\n              </div>\n            </div>\n            <button class=\"btn btn-primary\" onclick=\"plusDivs(1)\">\n              &#10095;\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\nimport { Subject } from 'rxjs';\nimport { Cell } from '../grid/cell';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ObserversService {\n  constructor() {}\n\n  private option = new ReplaySubject<number>(1);\n  opt = this.option.asObservable();\n  public changeOpt(o: number) {\n    this.option.next(o);\n  }\n\n  private start = new Subject();\n  prstart = this.start.asObservable();\n  public swap() {\n    this.start.next();\n  }\n\n  private pathFind = new Subject<number>();\n  algopick = this.pathFind.asObservable();\n  public chooseAlgorithm(m: number) {\n    this.pathFind.next(m);\n  }\n\n  private passGrid = new Subject<Cell[][]>();\n  grid = this.passGrid.asObservable();\n  public deliver(g: Cell[][]) {\n    this.passGrid.next(g);\n  }\n\n  private init = new Subject();\n  initiate = this.init.asObservable();\n  public initAlgo() {\n    this.init.next();\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Cell } from '../grid/cell';\r\n\r\nexport class recursiveDivision {\r\n  private grid: Array<Cell[]> = new Array<Cell[]>();\r\n\r\n  constructor(grid: Array<Cell[]>) {\r\n    this.grid = grid;\r\n  }\r\n\r\n  public async recDiv(\r\n    sx: number,\r\n    sy: number,\r\n    ex: number,\r\n    ey: number\r\n  ): Promise<any> {\r\n    const width: number = ex - sx;\r\n    const height: number = ey - sy;\r\n\r\n    //base case\r\n    if (height < 2 || width < 2) {\r\n      return;\r\n    }\r\n\r\n    //determine orientation and recurse\r\n    if (width < height) {\r\n      //horizontal\r\n      let xp = this.rand(ex - sx + 1) + sx; //passage\r\n      let yp = this.rand(ey - sy - 1) + sy + 1; //start of the wall\r\n\r\n      if (this.grid[yp][sx - 1].type == 'empty') {\r\n        xp = sx;\r\n      } else if (this.grid[yp][ex + 1].type == 'empty') {\r\n        xp = ex;\r\n      }\r\n\r\n      for (let i = sx; i <= ex; i++) {\r\n        if (i != xp) {\r\n          this.grid[yp][i].color = '#022335';\r\n          this.grid[yp][i].type = 'wall';\r\n          await this.sleep(40);\r\n        }\r\n      }\r\n\r\n      //upper subfield bounds\r\n      this.recDiv(sx, sy, ex, yp - 1); //the animation looks cooler if we let the threads run in parallel ;)\r\n      // lower subfield bounds\r\n      this.recDiv(sx, yp + 1, ex, ey);\r\n    } else {\r\n      //vertical\r\n      let xp = this.rand(ex - 1 - (sx + 1) + 1) + sx + 1;\r\n      let yp = this.rand(ey + 1 - sy) + sy;\r\n\r\n      if (this.grid[sy - 1][xp].type == 'empty') {\r\n        yp = sy;\r\n      } else if (this.grid[ey + 1][xp].type == 'empty') {\r\n        yp = ey;\r\n      }\r\n\r\n      for (let i = sy; i <= ey; i++) {\r\n        if (i != yp) {\r\n          this.grid[i][xp].color = '#022335';\r\n          this.grid[i][xp].type = 'wall';\r\n          await this.sleep(40);\r\n        }\r\n      }\r\n\r\n      //left subfield bounds\r\n      this.recDiv(sx, sy, xp - 1, ey);\r\n      // right subfield bounds\r\n      this.recDiv(xp + 1, sy, ex, ey);\r\n    }\r\n  }\r\n\r\n  public async perimeter() {\r\n    for (let i = 0; i < 19; i++) {\r\n      this.grid[i][0].color = '#022335';\r\n      this.grid[i][0].type = 'wall';\r\n      this.grid[i][44].color = '#022335';\r\n      this.grid[i][44].type = 'wall';\r\n      await this.sleep(10);\r\n    }\r\n    for (let i = 0; i < 45; i++) {\r\n      this.grid[0][i].color = '#022335';\r\n      this.grid[0][i].type = 'wall';\r\n      this.grid[18][i].color = '#022335';\r\n      this.grid[18][i].type = 'wall';\r\n      await this.sleep(10);\r\n    }\r\n  }\r\n\r\n  private sleep(ms: number): Promise<any> {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n\r\n  private rand(x: number): number {\r\n    return Math.floor(Math.random() * x);\r\n  }\r\n}\r\n","import { Node } from '../grid/node';\r\nimport { Cell } from '../grid/cell';\r\n\r\nexport class BFS {\r\n  private graph: Node[];\r\n  private grid: Cell[][];\r\n\r\n  constructor(grid: Cell[][], graph: Node[]) {\r\n    this.grid = grid;\r\n    this.graph = graph;\r\n  }\r\n\r\n  public async bfs(s: number, e: number) {\r\n    let q: number[] = [];\r\n    q.push(s);\r\n    const p = this.graph[s].pos;\r\n    this.grid[p[0]][p[1]].visited = true;\r\n    let found = false;\r\n    let path = [];\r\n    let previous: any[] = [];\r\n    this.graph.forEach((v) => {\r\n      previous.push(null);\r\n    });\r\n\r\n    while (q.length > 0) {\r\n      let n: any = q.shift();\r\n      path.push(n);\r\n      await this.sleep(40);\r\n      if (n == e) {\r\n        found = true;\r\n        break;\r\n      }\r\n\r\n      this.graph[n].neighbors.forEach((el) => {\r\n        const p = this.graph[el[0]].pos;\r\n        if (!this.grid[p[0]][p[1]].visited) {\r\n          this.grid[p[0]][p[1]].visited = true;\r\n          previous[el[0]] = n;\r\n          q.push(el[0]);\r\n          this.animator(p[0], p[1]);\r\n        }\r\n      });\r\n    }\r\n    if (found) {\r\n      this.clear();\r\n      let cr = previous[e];\r\n      let path = [e];\r\n      while (cr != s) {\r\n        path.push(cr);\r\n        cr = previous[cr];\r\n      }\r\n      for (let i = path.length - 1; i > -1; i--) {\r\n        const v = path[i];\r\n        const p = this.graph[v].pos;\r\n        this.grid[p[0]][p[1]].color = 'yellow';\r\n        this.grid[p[0]][p[1]].type = 'path';\r\n        await this.sleep(50);\r\n      }\r\n    } else {\r\n      confirm('not connected');\r\n    }\r\n  }\r\n\r\n  private clear() {\r\n    this.grid.forEach((r: Cell[]) => {\r\n      r.forEach((c: Cell) => {\r\n        if (c.type == 'visited') {\r\n          c.color = 'white';\r\n          c.type = 'empty';\r\n          c.visited = false;\r\n          c.end = false;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private animator(x: number, y: number) {\r\n    if (this.grid[x][y].type == 'empty') {\r\n      this.grid[x][y].type = 'visited';\r\n      this.grid[x][y].color = '#4d8ab1';\r\n    }\r\n  }\r\n\r\n  private sleep(ms: number): Promise<any> {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n}\r\n","import { Node } from '../grid/node';\r\nimport { Heapq } from 'ts-heapq';\r\nimport { Cell } from '../grid/cell';\r\nimport { State } from '../globalVar';\r\n\r\nexport class NRA {\r\n  private graph: Node[];\r\n  private grid: Array<Cell[]>;\r\n  private pqs: Heapq<any>[] = [];\r\n  private dicts: any = [];\r\n  private spds: any = [];\r\n  private paths: any = [];\r\n  private bounds: any = [];\r\n  private visited: any = [];\r\n  private readonly minDist: Number = 100000;\r\n  private timers: number = 0;\r\n  private path_mutex: number = 0;\r\n\r\n  private LBq: Heapq<any> = new Heapq<any>([], this.comparator);\r\n  private bests: any = {};\r\n\r\n  private found: boolean = false;\r\n  private best: any = null;\r\n\r\n  constructor(ids: number[], graph: any, grid: any) {\r\n    const t = ids.length;\r\n    for (let i = 0; i < t; i++) {\r\n      let spd = new Array(graph.length).fill(this.minDist);\r\n      let path = new Array(graph.length).fill(null);\r\n      let v = new Array(graph.length).fill(false);\r\n      this.spds.push(spd);\r\n      this.paths.push(path);\r\n      this.visited.push(v);\r\n    }\r\n\r\n    for (let i = 0; i < t; i++) {\r\n      let heapq: Heapq<any> = new Heapq<any>([], this.comparator);\r\n      this.pqs.push(heapq);\r\n      this.dicts.push({});\r\n    }\r\n\r\n    graph.forEach(() => {\r\n      this.bounds.push([this.minDist, 0]);\r\n    });\r\n\r\n    this.graph = graph;\r\n    this.grid = grid;\r\n  }\r\n\r\n  private comparator(a: any, b: any) {\r\n    return a[0] < b[0];\r\n  }\r\n\r\n  private checkBest() {\r\n    if (!this.best || this.LBq.length() == 0) {\r\n      return;\r\n    }\r\n\r\n    let v = this.LBq.top();\r\n    while (this.bests[v[1]] && this.LBq.length() > 0) {\r\n      this.LBq.pop();\r\n      if (this.LBq.length() > 0) {\r\n        v = this.LBq.top();\r\n      }\r\n    }\r\n\r\n    if (this.LBq.length() == 0) {\r\n      return;\r\n    }\r\n\r\n    if (v[0] > this.bounds[this.best][1]) {\r\n      console.log('cond');\r\n      this.found = true;\r\n    }\r\n  }\r\n\r\n  private updateBest(id: number) {\r\n    this.bests[id] = true;\r\n\r\n    if (!this.best) {\r\n      this.best = id;\r\n    } else if (this.bounds[this.best][1] > this.bounds[id][1]) {\r\n      this.best = id;\r\n    }\r\n  }\r\n\r\n  private addNode(id: number, dist: number, i: number) {\r\n    if (this.dicts[i][id]) {\r\n      this.removeNode(id, i);\r\n    }\r\n    let e = [dist, id];\r\n    this.dicts[i][id] = e;\r\n    this.pqs[i].push(e);\r\n  }\r\n\r\n  private removeNode(id: number, i: number) {\r\n    this.dicts[i][id][1] = 'removed';\r\n    delete this.dicts[i][id];\r\n  }\r\n\r\n  private popNode(i: number): any {\r\n    while (this.pqs[i].length() > 0) {\r\n      let e = this.pqs[i].pop();\r\n      if (e[1] != 'removed') {\r\n        delete this.dicts[i][e[1]];\r\n        return e;\r\n      }\r\n    }\r\n    return 'done';\r\n  }\r\n\r\n  private Dijkstra(i: number): any {\r\n    let v = this.popNode(i);\r\n\r\n    if (v == 'done') {\r\n      return 'done';\r\n    }\r\n\r\n    this.timers++;\r\n    setTimeout(() => {\r\n      this.animator(v[1]);\r\n      this.timers--;\r\n    }, 10);\r\n\r\n    this.visited[i][v[1]] == true;\r\n    this.graph[v[1]].neighbors.forEach((n: any) => {\r\n      if (!this.visited[i][n[0]]) {\r\n        if (this.spds[i][n[0]] > this.spds[i][v[1]] + n[1]) {\r\n          this.spds[i][n[0]] = this.spds[i][v[1]] + n[1];\r\n          this.paths[i][n[0]] = this.paths[i][v[1]] + '->' + n[0];\r\n          this.addNode(n[0], this.spds[i][n[0]], i);\r\n        }\r\n      }\r\n    });\r\n    return v;\r\n  }\r\n\r\n  public btmK(ids: any) {\r\n    for (let i = 0; i < ids.length; i++) {\r\n      this.spds[i][ids[i]] = 0;\r\n      this.paths[i][ids[i]] = ids[i] + '';\r\n      this.addNode(ids[i], 0, i);\r\n    }\r\n\r\n    while (!this.found) {\r\n      for (let i = 0; i < ids.length; i++) {\r\n        let v = this.Dijkstra(i);\r\n        if (v == 'done') {\r\n          this.found = true;\r\n          break;\r\n        }\r\n\r\n        if (v[0] < this.bounds[v[1]][0]) {\r\n          this.bounds[v[1]][0] = v[0];\r\n        }\r\n        this.LBq.push([this.bounds[v[1]][0], v[1]]);\r\n\r\n        let max = -1;\r\n        for (let k = 0; k < ids.length; k++) {\r\n          if (this.spds[k][v[1]] > max) {\r\n            max = this.spds[k][v[1]];\r\n          }\r\n        }\r\n\r\n        this.bounds[v[1]][1] = max;\r\n        if (max < this.minDist) {\r\n          this.updateBest(v[1]);\r\n        }\r\n      }\r\n      this.checkBest();\r\n    }\r\n\r\n    if (!this.best) {\r\n      confirm('meeting point doesnt exist');\r\n      let int = setInterval(() => {\r\n        if (this.timers <= 0) {\r\n          State.inProgress = false;\r\n          clearInterval(int);\r\n        }\r\n      }, 10);\r\n      return;\r\n    }\r\n\r\n    let int = setInterval(() => {\r\n      if (this.timers == 0) {\r\n        this.timers = -1;\r\n        let x = this.graph[this.best].pos[0];\r\n        let y = this.graph[this.best].pos[1];\r\n        this.grid[x][y].end = true;\r\n        this.grid[x][y].meet = true;\r\n        this.grid[x][y].color = 'yellow';\r\n        this.clear();\r\n        this.printPaths(ids);\r\n        clearInterval(int);\r\n      }\r\n    }, 10);\r\n  }\r\n\r\n  private animator(id: any) {\r\n    const x = this.graph[id].pos[0];\r\n    const y = this.graph[id].pos[1];\r\n    if (this.grid[x][y].type == 'empty') {\r\n      this.grid[x][y].type = 'visited';\r\n      this.grid[x][y].color = '#de00ff';\r\n    }\r\n  }\r\n\r\n  private clear() {\r\n    for (let i = 0; i < this.grid.length; i++) {\r\n      for (let j = 0; j < this.grid[i].length; j++) {\r\n        if (this.grid[i][j].type == 'visited') {\r\n          this.grid[i][j].type = 'empty';\r\n          this.grid[i][j].color = 'white';\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private printPaths(ids: any) {\r\n    for (let i = 0; i < ids.length; i++) {\r\n      let path = this.paths[i][this.best]\r\n        .split('->')\r\n        .map((p: string) => parseInt(p));\r\n      path.forEach((e: number, index: any) => {\r\n        this.path_mutex++;\r\n        setTimeout(() => {\r\n          let x = this.graph[e].pos[0];\r\n          let y = this.graph[e].pos[1];\r\n          if (this.grid[x][y].type == 'empty' || this.grid[x][y].end) {\r\n            this.grid[x][y].color = 'yellow';\r\n            this.grid[x][y].type = 'path';\r\n          }\r\n          this.path_mutex--;\r\n        }, 70 * index);\r\n      });\r\n    }\r\n\r\n    let int = setInterval(() => {\r\n      if (this.path_mutex <= 0) {\r\n        State.inProgress = false;\r\n        clearInterval(int);\r\n      }\r\n    }, 10);\r\n  }\r\n}\r\n","import { Cell } from '../grid/cell';\r\n\r\nexport class Edge {\r\n  public s: Cell;\r\n  public e: Cell;\r\n\r\n  constructor(start: Cell, end: Cell) {\r\n    this.s = start;\r\n    this.e = end;\r\n  }\r\n}\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Cell } from './cell';\nimport { Subscription } from 'rxjs';\nimport { ObserversService } from '../services/observers.service';\nimport { modAstar } from '../pathFindAlgos/fightTheAlgo';\nimport { Builder } from '../grid/builder';\n\nimport { State } from '../globalVar';\n\n@Component({\n  selector: 'app-grid',\n  templateUrl: './grid.component.html',\n  styleUrls: ['./grid.component.css'],\n})\nexport class GridComponent implements OnInit, OnDestroy {\n  //graph info\n  private grid: Cell[][] = [];\n  private readonly columns = 45;\n  private readonly rows = 19;\n  private c: number[] = [];\n  private next: number[] = [];\n\n  //starters for fight the algorithm\n  private readonly sx: number = 9;\n  private readonly sy: number = 4;\n\n  private readonly ex: number = 9;\n  private readonly ey: number = 30;\n\n  //options\n  private clicked: boolean = false;\n  public option: number = 0;\n  private observers: Subscription[] = [];\n  private builder: Builder = new Builder();\n\n  constructor(private share: ObserversService) {\n    let id = 0;\n    for (let i = 0; i < this.rows; i++) {\n      let cells: Cell[] = [];\n      for (let j = 0; j < this.columns; j++) {\n        cells.push(new Cell('empty', 'white', id));\n        id++;\n      }\n      this.grid.push(cells);\n    }\n  }\n\n  ngOnInit(): void {\n    this.observers.push(\n      this.share.opt.subscribe((opt: any) => {\n        this.option = opt;\n        if (opt == 10) {\n          this.option = 2;\n          this.setPoints();\n        }\n      }),\n      this.share.initiate.subscribe(() => {\n        this.start();\n      })\n    );\n    this.share.deliver(this.grid);\n  }\n\n  ngOnDestroy(): void {\n    this.observers.forEach((observer) => {\n      observer.unsubscribe();\n    });\n  }\n\n  public hovered(i: number, j: number) {\n    if (State.inProgress) {\n      return;\n    }\n    if (State.type == 'f') {\n      this.next = [i, j];\n    }\n    if (this.option == 0) {\n      if (\n        this.clicked &&\n        this.grid[i][j].type == 'empty' &&\n        !this.grid[i][j].end\n      ) {\n        this.grid[i][j].color = '#022335';\n        this.grid[i][j].type = 'wall';\n      }\n    }\n  }\n\n  public setstarter(i: number, j: number) {\n    if (\n      State.points.length >= 10 ||\n      this.option != 2 ||\n      State.inProgress ||\n      State.fightR\n    ) {\n      return;\n    } else if (State.type == 'sp') {\n      if (State.points.length == 2) {\n        return; //only two points for path finding\n      }\n    } else if (State.type == 'f') {\n      if (State.points.length == 1) {\n        return;\n      }\n    }\n    if (this.grid[i][j].type == 'empty') {\n      State.points.push([i, j]);\n      this.grid[i][j].type = 'start';\n      this.grid[i][j].color = 'blue';\n    }\n  }\n\n  public setPoints() {\n    this.setstarter(this.sx, this.sy);\n    this.grid[this.ex][this.ey].end = true;\n    this.c = [this.ex, this.ey];\n  }\n\n  public mouseUp() {\n    if (State.inProgress || this.option == 0 || State.fightR) {\n      return;\n    }\n    if (State.type == 'f') {\n      this.grid[this.next[0]][this.next[1]].end = true;\n      this.grid[this.c[0]][this.c[1]].end = false;\n      this.c = [this.next[0], this.next[1]];\n    }\n  }\n\n  public start() {\n    let graph = this.builder.buildgraph(this.grid);\n    let astar = new modAstar(\n      this.grid,\n      graph,\n      this.grid[this.c[0]][this.c[1]].id\n    );\n    State.fightR = true;\n    astar.modedAstar(this.grid[9][4].id).then(() => {\n      State.fightR = false;\n    });\n  }\n\n  public mouseDown() {\n    this.clicked = !this.clicked;\n  }\n\n  public get gridarray() {\n    return this.grid;\n  }\n\n  public get draggable() {\n    return State.type == 'f' && !State.fightR;\n  }\n\n  public disable() {\n    this.clicked = false;\n  }\n}\n","<div class=\"main\">\n  <div class=\"points\">\n    <div class=\"info\">\n      <div class=\"squere wall\"></div>\n      Wall\n    </div>\n    <div class=\"info\">\n      <div class=\"squere visited\"></div>\n      <div class=\"squere meeting\"></div>\n      Visited\n    </div>\n    <div class=\"info\">\n      <div class=\"squere path\"></div>\n      Path\n    </div>\n    <div class=\"info\">\n      <div class=\"squere start\"></div>\n      Start\n    </div>\n    <div class=\"info\">\n      <div class=\"squere\"><i class=\"fas fa-map-marker\"></i></div>\n      End Point\n    </div>\n  </div>\n  <div\n    class=\"grid-container\"\n    (mouseup)=\"mouseUp()\"\n    (mousedown)=\"mouseDown()\"\n    (mouseenter)=\"disable()\"\n    cdkDropListGroup\n  >\n    <ng-container *ngFor=\"let row of gridarray; let i = index\">\n      <div\n        *ngFor=\"let cell of row; let j = index\"\n        class=\"grid-item\"\n        [style.background-color]=\"cell.color\"\n        [class.grid-item-borders]=\"cell.type == 'wall'\"\n        [class.grid-item-path]=\"cell.type == 'path'\"\n        [class.magenta]=\"\n          cell.type == 'visited' || cell.type == 'wall' || cell.type == 'start'\n        \"\n        (mouseover)=\"hovered(i, j)\"\n        (click)=\"setstarter(i, j)\"\n        cdkDropList\n      >\n        <i\n          class=\"fas fa-map-marker\"\n          cdkDrag\n          cdkDragBoundary=\".grid-container\"\n          [cdkDragDisabled]=\"!draggable || option == 0\"\n          *ngIf=\"cell.end\"\n        ></i>\n      </div>\n    </ng-container>\n  </div>\n</div>\n","export class Cell {\r\n  public type: string = '';\r\n  public color: string = '';\r\n  public id: number = 0;\r\n  public end: boolean = false;\r\n  public visited: boolean = false;\r\n  public meet: boolean = false;\r\n\r\n  constructor(type: string = '', color: string = '', id: number = 0) {\r\n    this.type = type;\r\n    this.color = color;\r\n    this.id = id;\r\n  }\r\n}\r\n","import { Node } from '../grid/node';\r\nimport { Heapq } from 'ts-heapq';\r\nimport { Cell } from '../grid/cell';\r\n\r\nexport class UCS {\r\n  private graph: Node[];\r\n  private grid: Cell[][];\r\n  private dict: any = {};\r\n  private pq: Heapq<any> = new Heapq<any>([], this.comparator);\r\n  private readonly minDist: Number = 100000;\r\n\r\n  constructor(grid: Cell[][], graph: Node[]) {\r\n    this.grid = grid;\r\n    this.graph = graph;\r\n  }\r\n\r\n  private addNode(id: number, dist: number) {\r\n    if (this.dict[id]) {\r\n      this.removeNode(id);\r\n    }\r\n    let e = [dist, id];\r\n    this.dict[id] = e;\r\n    this.pq.push(e);\r\n  }\r\n\r\n  private removeNode(id: number) {\r\n    this.dict[id][1] = 'removed';\r\n    delete this.dict[id];\r\n  }\r\n\r\n  private popNode(): any {\r\n    while (this.pq.length() > 0) {\r\n      let e = this.pq.pop();\r\n      if (e[1] != 'removed') {\r\n        delete this.dict[e[1]];\r\n        return e;\r\n      }\r\n    }\r\n    confirm('nodes are not connected');\r\n    return 'done';\r\n  }\r\n\r\n  private comparator(a: any, b: any) {\r\n    return a[0] < b[0];\r\n  }\r\n\r\n  public async UCS(s: any, t: any): Promise<void> {\r\n    let spd = new Array(this.graph.length).fill(this.minDist);\r\n    let path: string[] = new Array(this.graph.length).fill(null);\r\n    let explored = new Array(this.graph.length).fill(false);\r\n    let found = false;\r\n\r\n    path[s] = s + '';\r\n    spd[s] = 0;\r\n    this.addNode(s, spd[s]);\r\n\r\n    while (this.pq.length() > 0) {\r\n      let v = this.popNode();\r\n      this.animator(v[1]);\r\n      await this.sleep(20);\r\n      if (v[1] == 'done') {\r\n        break;\r\n      }\r\n      explored[v[1]] = true;\r\n\r\n      if (t == v[1]) {\r\n        found = true;\r\n        break;\r\n      }\r\n      this.graph[v[1]].neighbors.forEach((n: any) => {\r\n        if (!explored[n[0]]) {\r\n          path[n[0]] = path[v[1]] + '->' + n[0];\r\n          spd[n[0]] = spd[v[1]] + n[1];\r\n          this.addNode(n[0], spd[n[0]]);\r\n        }\r\n      });\r\n    }\r\n    if (found) {\r\n      this.clear();\r\n      let p = path[t].split('->').map((p: string) => parseInt(p));\r\n      for (const v of p) {\r\n        let c = this.graph[v].pos;\r\n        if (\r\n          this.grid[c[0]][c[1]].type == 'empty' ||\r\n          this.grid[c[0]][c[1]].end\r\n        ) {\r\n          this.grid[c[0]][c[1]].color = 'yellow';\r\n          this.grid[c[0]][c[1]].type = 'path';\r\n          await this.sleep(30);\r\n        }\r\n      }\r\n    } else {\r\n      confirm('nodes are not connected');\r\n    }\r\n  }\r\n\r\n  private animator(id: any) {\r\n    const x = this.graph[id].pos[0];\r\n    const y = this.graph[id].pos[1];\r\n    if (this.grid[x][y].type == 'empty') {\r\n      this.grid[x][y].type = 'visited';\r\n      this.grid[x][y].color = '#4d8ab1';\r\n    }\r\n  }\r\n\r\n  private clear() {\r\n    this.grid.forEach((r: Cell[]) => {\r\n      r.forEach((c: Cell) => {\r\n        if (c.type == 'visited') {\r\n          c.color = 'white';\r\n          c.type = 'empty';\r\n          c.visited = false;\r\n          c.end = false;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private sleep(ms: number): Promise<any> {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\nimport { State } from '../globalVar';\nimport { Cell } from '../grid/cell';\nimport { Node } from '../grid/node';\nimport { NRA } from '../pathFindAlgos/nra';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TopKService {\n  private grid: Cell[][];\n  private graph: Node[] = [];\n\n  constructor(@Inject(Cell) grid: Cell[][]) {\n    this.grid = grid;\n  }\n\n  public chooseAlgo(o: number, graph: Node[], ids: number[]) {\n    if (State.inProgress) {\n      return;\n    }\n    State.inProgress = true;\n    this.graph = graph;\n    if (o == 5) {\n      this.nra(ids);\n    }\n  }\n\n  private nra(ids: number[]) {\n    let nra = new NRA(ids, this.graph, this.grid);\n    nra.btmK(ids);\n  }\n}\n","import { Component } from '@angular/core';\nimport { Plugins } from '@capacitor/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  title = 'Visualizer';\n}\n","<app-topbar></app-topbar>\n<app-grid></app-grid>\n","export class Node {\r\n  public id: number = 0;\r\n  public pos: number[] = []; //xAxis and yAxis on the grid\r\n  public neighbors: number[][] = [];\r\n\r\n  constructor(id: number, pos: any) {\r\n    this.id = id;\r\n    this.pos = pos;\r\n  }\r\n\r\n  public setneighbor(id: number, cost: number, direction: number = 0) {\r\n    let n: number[] = [id, cost, direction]; //we need the direction for the recursive backtracker\r\n    this.neighbors.push(n);\r\n  }\r\n}\r\n","import { Cell } from '../grid/cell';\r\nimport { Node } from '../grid/node';\r\n\r\nexport class recBacktracker {\r\n  private grid: Array<Cell[]>;\r\n  private graph: Array<Node> = [];\r\n\r\n  constructor(grid: Array<Cell[]>) {\r\n    this.grid = grid;\r\n  }\r\n\r\n  public init() {\r\n    let id = 0;\r\n    this.graph = [];\r\n\r\n    this.grid.forEach((row: Cell[]) => {\r\n      row.forEach((c: Cell) => {\r\n        c.color = '#022335';\r\n        c.type = 'wall';\r\n        c.visited = false;\r\n      });\r\n    });\r\n\r\n    for (let i = 0; i < this.grid.length; i++) {\r\n      for (let j = 0; j < this.grid[i].length; j++) {\r\n        this.graph.push(new Node(id, [i, j]));\r\n        id++;\r\n      }\r\n    }\r\n\r\n    //determine the neighbors as well as the direction of the walls in between\r\n    //each node must be surrounded by walls\r\n    for (let i = 1; i < this.grid.length; i += 2) {\r\n      for (let j = 1; j < this.grid[i].length; j += 2) {\r\n        id = this.grid[i][j].id;\r\n        if (j - 2 >= 0) {\r\n          this.graph[id].setneighbor(this.grid[i][j - 2].id, 1, 1); //west\r\n        }\r\n\r\n        if (i - 2 >= 0) {\r\n          this.graph[id].setneighbor(this.grid[i - 2][j].id, 1, 2); //north\r\n        }\r\n\r\n        if (j + 2 < 45) {\r\n          this.graph[id].setneighbor(this.grid[i][j + 2].id, 1, 3); //east\r\n        }\r\n\r\n        if (i + 2 < 19) {\r\n          this.graph[id].setneighbor(this.grid[i + 2][j].id, 1, 4); //south\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  //iterative version of recursive backtracker using a stack\r\n  public async DFS(x: number, y: number): Promise<any> {\r\n    //mark current as visited\r\n    let stack: Cell[] = [];\r\n    let current: any = this.grid[x][y];\r\n    current.visited = true;\r\n    stack.push(current);\r\n\r\n    while (stack.length > 0) {\r\n      let ns = this.neighbors(current.id);\r\n      if (ns.length > 0) {\r\n        //choose a neighbor\r\n        let i: number = this.rand(ns.length);\r\n        let x = ns[i][0];\r\n        let y = ns[i][1];\r\n        let d = ns[i][2];\r\n\r\n        //determine the wall to remove in between\r\n        let w: Cell = this.removeWall(x, y, d);\r\n\r\n        current.color = 'white';\r\n        current.type = 'empty';\r\n        await this.sleep(50);\r\n\r\n        w.color = 'white';\r\n        w.type = 'empty';\r\n\r\n        current = this.grid[x][y];\r\n        current.visited = true;\r\n        stack.push(current);\r\n      } else {\r\n        current.color = 'white';\r\n        current.type = 'empty';\r\n        current = stack.pop(); //backtrack\r\n      }\r\n    }\r\n  }\r\n\r\n  //get the neighbors if any\r\n  private neighbors(id: number) {\r\n    let p;\r\n    let ns: any = [];\r\n    this.graph[id].neighbors.forEach((n: number[]) => {\r\n      p = this.graph[n[0]].pos;\r\n      if (!this.grid[p[0]][p[1]].visited) {\r\n        ns.push([p[0], p[1], n[2]]);\r\n      }\r\n    });\r\n    return ns;\r\n  }\r\n\r\n  //get the wall between the current cell and neighbor based on the direction\r\n  private removeWall(x: number, y: number, direction: number): Cell {\r\n    let w: any;\r\n    if (direction == 1) {\r\n      w = this.grid[x][y + 1];\r\n    } else if (direction == 2) {\r\n      w = this.grid[x + 1][y];\r\n    } else if (direction == 3) {\r\n      w = this.grid[x][y - 1];\r\n    } else if (direction == 4) {\r\n      w = this.grid[x - 1][y];\r\n    }\r\n    return w;\r\n  }\r\n\r\n  private rand(x: number): number {\r\n    return Math.floor(Math.random() * x);\r\n  }\r\n\r\n  private sleep(ms: number): Promise<any> {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n\r\n  //recursive implementation, harder to animate tho :/\r\n  /*public DFS(x: number, y: number) {\r\n    let current: Cell = this.grid[x][y];\r\n    current.visited = true;\r\n    this.path.push(current);\r\n\r\n    while (!this.allVisited(current.id)) {\r\n      //choose a neighbor\r\n      let i: number = this.rand(this.ns.length);\r\n      let x = this.ns[i][0];\r\n      let y = this.ns[i][1];\r\n      let d = this.ns[i][2];\r\n\r\n      //determine the wall to remove\r\n      let w: Cell = this.removeWall(x, y, d);\r\n\r\n      if (w) {\r\n        this.path.push(w);\r\n      }\r\n      this.DFS(x, y);\r\n    }\r\n  }*/\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { TopbarComponent } from './topbar/topbar.component';\nimport { GridComponent } from './grid/grid.component';\nimport { ObserversService } from './services/observers.service';\nimport { MazesService } from './services/mazes.service';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\nimport { PathfindService } from './services/pathfind.service';\nimport { TopKService } from './services/top-k.service';\n\n@NgModule({\n  declarations: [AppComponent, TopbarComponent, GridComponent],\n  imports: [BrowserModule, AppRoutingModule, DragDropModule],\n  providers: [ObserversService, MazesService, PathfindService, TopKService],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Node } from '../grid/node';\r\nimport { Heapq } from 'ts-heapq';\r\nimport { Cell } from '../grid/cell';\r\n\r\nexport class Astar {\r\n  private graph: Node[];\r\n  private grid: Cell[][];\r\n  private dict: any = {};\r\n  private pq: Heapq<any> = new Heapq<any>([], this.comparator);\r\n  private readonly minDist: Number = 100000;\r\n\r\n  constructor(grid: Cell[][], graph: Node[]) {\r\n    this.grid = grid;\r\n    this.graph = graph;\r\n  }\r\n\r\n  private addNode(id: number, dist: number) {\r\n    if (this.dict[id]) {\r\n      this.removeNode(id);\r\n    }\r\n    let e = [dist, id];\r\n    this.dict[id] = e;\r\n    this.pq.push(e);\r\n  }\r\n\r\n  private removeNode(id: number) {\r\n    this.dict[id][1] = 'removed';\r\n    delete this.dict[id];\r\n  }\r\n\r\n  private popNode(): any {\r\n    while (this.pq.length() > 0) {\r\n      let e = this.pq.pop();\r\n      if (e[1] != 'removed') {\r\n        delete this.dict[e[1]];\r\n        return e;\r\n      }\r\n    }\r\n    confirm('nodes are not connected');\r\n    return 'done';\r\n  }\r\n\r\n  private comparator(a: any, b: any) {\r\n    return a[0] < b[0];\r\n  }\r\n\r\n  private manh(s: any, e: any) {\r\n    let p1 = this.graph[s].pos;\r\n    let p2 = this.graph[e].pos;\r\n    return Math.abs(p2[0] - p1[0]) + Math.abs(p2[1] - p1[1]);\r\n  }\r\n\r\n  public async Astar(s: any, t: any): Promise<void> {\r\n    let spd = new Array(this.graph.length).fill(this.minDist);\r\n    let path: string[] = new Array(this.graph.length).fill(null);\r\n    let visited = new Array(this.graph.length).fill(false);\r\n    let found = false;\r\n\r\n    spd[s] = 0;\r\n    path[s] = s + '';\r\n\r\n    this.addNode(s, spd[s] + this.manh(s, t));\r\n\r\n    while (this.pq.length() > 0) {\r\n      let v = this.popNode();\r\n\r\n      if (v == 'done') {\r\n        break;\r\n      }\r\n\r\n      this.animator(v[1]);\r\n      await this.sleep(50);\r\n\r\n      visited[v[1]] = true;\r\n\r\n      if (t == v[1]) {\r\n        found = true;\r\n        break;\r\n      }\r\n      this.graph[v[1]].neighbors.forEach((n: any) => {\r\n        if (!visited[n[0]]) {\r\n          if (spd[n[0]] > spd[v[1]] + n[1]) {\r\n            spd[n[0]] = spd[v[1]] + n[1];\r\n            path[n[0]] = path[v[1]] + '->' + n[0];\r\n            this.addNode(n[0], spd[n[0]] + this.manh(n[0], t));\r\n          }\r\n        }\r\n      });\r\n    }\r\n    if (found) {\r\n      this.clear();\r\n      let p = path[t].split('->').map((p: string) => parseInt(p));\r\n      for (const v of p) {\r\n        let c = this.graph[v].pos;\r\n        if (\r\n          this.grid[c[0]][c[1]].type == 'empty' ||\r\n          this.grid[c[0]][c[1]].end\r\n        ) {\r\n          this.grid[c[0]][c[1]].color = 'yellow';\r\n          this.grid[c[0]][c[1]].type = 'path';\r\n          await this.sleep(30);\r\n        }\r\n      }\r\n    } else {\r\n      confirm('not connected');\r\n    }\r\n  }\r\n\r\n  private animator(id: any) {\r\n    const x = this.graph[id].pos[0];\r\n    const y = this.graph[id].pos[1];\r\n    if (this.grid[x][y].type == 'empty') {\r\n      this.grid[x][y].type = 'visited';\r\n      this.grid[x][y].color = '#4d8ab1';\r\n    }\r\n  }\r\n\r\n  private clear() {\r\n    this.grid.forEach((r: Cell[]) => {\r\n      r.forEach((c: Cell) => {\r\n        if (c.type == 'visited') {\r\n          c.color = 'white';\r\n          c.type = 'empty';\r\n          c.visited = false;\r\n          c.end = false;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private sleep(ms: number): Promise<any> {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n\r\n  /*private sleep(ms: number): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        resolve('timed out!');\r\n      }, ms);\r\n    });\r\n  }*/\r\n}\r\n","import { Cell } from '../grid/cell';\r\nimport { Node } from '../grid/node';\r\n\r\nexport class randomizedPrim {\r\n  private grid: Array<Cell[]>;\r\n  private graph: Array<Node> = [];\r\n\r\n  constructor(grid: Array<Cell[]>) {\r\n    this.grid = grid;\r\n  }\r\n\r\n  public init() {\r\n    let id = 0;\r\n    this.graph = [];\r\n\r\n    this.grid.forEach((row: Cell[]) => {\r\n      row.forEach((c: Cell) => {\r\n        c.color = '#022335';\r\n        c.type = 'wall';\r\n        c.visited = false;\r\n      });\r\n    });\r\n\r\n    for (let i = 0; i < this.grid.length; i++) {\r\n      for (let j = 0; j < this.grid[i].length; j++) {\r\n        this.graph.push(new Node(id, [i, j]));\r\n        id++;\r\n      }\r\n    }\r\n\r\n    //determine the neighbors as well as the direction of the walls in between\r\n    //each node must be surrounded by walls\r\n    for (let i = 1; i < this.grid.length; i += 2) {\r\n      for (let j = 1; j < this.grid[i].length; j += 2) {\r\n        id = this.grid[i][j].id;\r\n        if (j - 2 >= 0) {\r\n          this.graph[id].setneighbor(this.grid[i][j - 2].id, 1, 1); //west\r\n        }\r\n\r\n        if (i - 2 >= 0) {\r\n          this.graph[id].setneighbor(this.grid[i - 2][j].id, 1, 2); //north\r\n        }\r\n\r\n        if (j + 2 < 45) {\r\n          this.graph[id].setneighbor(this.grid[i][j + 2].id, 1, 3); //east\r\n        }\r\n\r\n        if (i + 2 < 19) {\r\n          this.graph[id].setneighbor(this.grid[i + 2][j].id, 1, 4); //south\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public async randPrim(x: number, y: number): Promise<any> {\r\n    //starting node only node in set S, where S + V = G\r\n    const pathSet: Set<Cell> = new Set<Cell>();\r\n    pathSet.add(this.grid[x][y]);\r\n\r\n    while (pathSet.size > 0) {\r\n      //get a random cell from the set S, mark it as visited\r\n      let cell: Cell = this.getRandomCell(pathSet);\r\n      cell.color = 'white';\r\n      cell.type = 'empty';\r\n      cell.visited = true;\r\n      pathSet.delete(cell);\r\n      await this.sleep(20);\r\n\r\n      //get the neighbors in graph V = G - S\r\n      let neighbors = this.neighbors(cell.id);\r\n\r\n      //determine the already visited neighbors, this will be the frontier of V\r\n      let s: number[][] = [];\r\n      neighbors.forEach((n) => {\r\n        if (this.grid[n[0]][n[1]].visited) {\r\n          s.push(n);\r\n        }\r\n      });\r\n\r\n      //randomly connect to one of them if any\r\n      let k = 0,\r\n        l = 0,\r\n        d = 0;\r\n      if (s.length > 0) {\r\n        //get a random neighbor in S\r\n        let i = this.rand(s.length);\r\n        k = s[i][0];\r\n        l = s[i][1];\r\n        d = s[i][2];\r\n\r\n        //determine the wall to remove in between cell and s[i]\r\n        let w: Cell = this.removeWall(k, l, d);\r\n\r\n        //carve the passage between the cell and the neighbor\r\n        await this.sleep(20);\r\n        w.color = 'white';\r\n        w.type = 'empty';\r\n\r\n        //mark the cell s[i], adding it into the S\r\n        await this.sleep(20);\r\n        this.grid[k][l].type = 'empty';\r\n        this.grid[k][l].color = 'white';\r\n        this.grid[k][l].visited = true;\r\n      }\r\n\r\n      //add the unvisited neighbors in the new V into the set\r\n      neighbors.forEach((n) => {\r\n        if (!this.grid[n[0]][n[1]].visited) {\r\n          pathSet.add(this.grid[n[0]][n[1]]);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  //get the wall between the current cell and neighbor based on the direction\r\n  private removeWall(x: number, y: number, direction: number): Cell {\r\n    let w: Cell;\r\n\r\n    if (direction == 1) {\r\n      w = this.grid[x][y + 1];\r\n    } else if (direction == 2) {\r\n      w = this.grid[x + 1][y];\r\n    } else if (direction == 3) {\r\n      w = this.grid[x][y - 1];\r\n    } else {\r\n      w = this.grid[x - 1][y];\r\n    }\r\n    return w;\r\n  }\r\n\r\n  // get a random cell from the set\r\n  public getRandomCell(set: Set<Cell>): Cell {\r\n    let index = this.rand(set.size);\r\n    let cntr = 0;\r\n    for (let key of set.keys()) {\r\n      if (cntr++ === index) {\r\n        return key;\r\n      }\r\n    }\r\n    return new Cell();\r\n  }\r\n\r\n  //get the neighbors if any\r\n  private neighbors(id: number): number[][] {\r\n    let x, y;\r\n    let ns: number[][] = [];\r\n    this.graph[id].neighbors.forEach((n: number[]) => {\r\n      x = this.graph[n[0]].pos[0];\r\n      y = this.graph[n[0]].pos[1];\r\n      ns.push([x, y, n[2]]);\r\n    });\r\n    return ns;\r\n  }\r\n\r\n  private rand(x: number): number {\r\n    return Math.floor(Math.random() * x);\r\n  }\r\n\r\n  private sleep(ms: number): Promise<any> {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n}\r\n","import { Node } from '../grid/node';\r\nimport { Heapq } from 'ts-heapq';\r\nimport { Cell } from '../grid/cell';\r\n\r\nexport class modAstar {\r\n  private graph: Node[];\r\n  private grid: Cell[][];\r\n  private dict: any = {};\r\n  private pq: Heapq<any> = new Heapq<any>([], this.comparator);\r\n  private end: number = 0;\r\n  private readonly minDist: Number = 100000;\r\n\r\n  constructor(grid: Cell[][], graph: Node[], e: number) {\r\n    this.grid = grid;\r\n    this.graph = graph;\r\n    this.end = e;\r\n  }\r\n\r\n  private addNode(id: number, dist: number) {\r\n    if (this.dict[id]) {\r\n      this.removeNode(id);\r\n    }\r\n    let e = [dist, id];\r\n    this.dict[id] = e;\r\n    this.pq.push(e);\r\n  }\r\n\r\n  private removeNode(id: number) {\r\n    this.dict[id][1] = 'removed';\r\n    delete this.dict[id];\r\n  }\r\n\r\n  private popNode(): any {\r\n    while (this.pq.length() > 0) {\r\n      let e = this.pq.pop();\r\n      if (e[1] != 'removed') {\r\n        delete this.dict[e[1]];\r\n        return e;\r\n      }\r\n    }\r\n    return 'done';\r\n  }\r\n\r\n  private comparator(a: any, b: any) {\r\n    return a[0] < b[0];\r\n  }\r\n\r\n  private manh(s: any) {\r\n    let p1 = this.graph[s].pos;\r\n    let p2 = this.graph[this.end].pos;\r\n    return Math.abs(p2[0] - p1[0]) + Math.abs(p2[1] - p1[1]);\r\n  }\r\n\r\n  public async modedAstar(s: any): Promise<void> {\r\n    let spd = new Array(this.graph.length).fill(this.minDist);\r\n    let path: string[] = new Array(this.graph.length).fill(null);\r\n    let visited = new Array(this.graph.length).fill(false);\r\n    let found = false;\r\n\r\n    spd[s] = 0;\r\n    path[s] = s + '';\r\n\r\n    this.addNode(s, spd[s] + this.manh(s));\r\n\r\n    while (this.pq.length() > 0) {\r\n      let v = this.popNode();\r\n      this.animator(v[1]);\r\n      await this.sleep(20);\r\n      if (v == 'done') {\r\n        break;\r\n      }\r\n      visited[v[1]] = true;\r\n\r\n      if (this.end == v[1]) {\r\n        found = true;\r\n        break;\r\n      }\r\n      this.graph[v[1]].neighbors.forEach((n: any) => {\r\n        if (!this.isWall(n[0])) {\r\n          if (!visited[n[0]]) {\r\n            if (spd[n[0]] > spd[v[1]] + n[1]) {\r\n              spd[n[0]] = spd[v[1]] + n[1];\r\n              path[n[0]] = path[v[1]] + '->' + n[0];\r\n              this.addNode(n[0], spd[n[0]] + this.manh(n[0]));\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n    if (found) {\r\n      this.clear();\r\n      let p = path[this.end].split('->').map((p: string) => parseInt(p));\r\n      for (const v of p) {\r\n        let c = this.graph[v].pos;\r\n        if (\r\n          this.grid[c[0]][c[1]].type == 'empty' ||\r\n          this.grid[c[0]][c[1]].type == 'wall'\r\n        ) {\r\n          this.grid[c[0]][c[1]].color = 'yellow';\r\n          this.grid[c[0]][c[1]].type = 'path';\r\n          await this.sleep(30);\r\n        }\r\n      }\r\n    } else {\r\n      confirm('not connected');\r\n    }\r\n  }\r\n\r\n  public updateEnd(x: number, y: number) {\r\n    this.end = this.grid[x][y].id;\r\n  }\r\n\r\n  private isWall(id: number): boolean {\r\n    let p = this.graph[id].pos;\r\n    return this.grid[p[0]][p[1]].type == 'wall';\r\n  }\r\n\r\n  private animator(id: any) {\r\n    const x = this.graph[id].pos[0];\r\n    const y = this.graph[id].pos[1];\r\n    if (this.grid[x][y].type == 'empty' && !this.grid[x][y].end) {\r\n      this.grid[x][y].type = 'visited';\r\n      this.grid[x][y].color = '#4d8ab1';\r\n    }\r\n  }\r\n\r\n  private clear() {\r\n    this.grid.forEach((r: Cell[]) => {\r\n      r.forEach((c: Cell) => {\r\n        if (c.type == 'visited' && !c.end) {\r\n          c.color = 'white';\r\n          c.type = 'empty';\r\n          c.visited = false;\r\n          c.end = false;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private sleep(ms: number): Promise<any> {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n}\r\n","import { Cell } from './cell';\r\nimport { Node } from './node';\r\n\r\nexport class Builder {\r\n  constructor() {}\r\n\r\n  public buildgraph(grid: Cell[][]): any {\r\n    //construct the nodes\r\n    let graph: Node[] = [];\r\n    let id = 0;\r\n    for (let i = 0; i < grid.length; i++) {\r\n      for (let j = 0; j < grid[i].length; j++) {\r\n        graph.push(new Node(id, [i, j]));\r\n        id++;\r\n      }\r\n    }\r\n\r\n    //determine the neighbors\r\n    id = 0;\r\n    for (let i = 0; i < grid.length; i++) {\r\n      for (let j = 0; j < grid[i].length; j++) {\r\n        if (grid[i][j].type != 'wall') {\r\n          grid[i][j].visited = false;\r\n          if (j - 1 >= 0) {\r\n            if (grid[i][j - 1].type != 'wall') {\r\n              graph[id].setneighbor(grid[i][j - 1].id, 1);\r\n            }\r\n          }\r\n\r\n          if (i - 1 >= 0) {\r\n            if (grid[i - 1][j].type != 'wall') {\r\n              graph[id].setneighbor(grid[i - 1][j].id, 1);\r\n            }\r\n          }\r\n\r\n          if (j + 1 < 45) {\r\n            if (grid[i][j + 1].type != 'wall') {\r\n              graph[id].setneighbor(grid[i][j + 1].id, 1);\r\n            }\r\n          }\r\n\r\n          if (i + 1 < 19) {\r\n            if (grid[i + 1][j].type != 'wall') {\r\n              graph[id].setneighbor(grid[i + 1][j].id, 1);\r\n            }\r\n          }\r\n        }\r\n        id++;\r\n      }\r\n    }\r\n    return graph;\r\n  }\r\n}\r\n","import { Node } from '../grid/node';\r\nimport { Cell } from '../grid/cell';\r\n\r\nexport class DFS {\r\n  private graph: Node[];\r\n  private grid: Cell[][];\r\n\r\n  constructor(grid: Cell[][], graph: Node[]) {\r\n    this.grid = grid;\r\n    this.graph = graph;\r\n  }\r\n\r\n  public async dfs(s: number, e: number) {\r\n    let stack: number[] = [];\r\n    stack.push(s);\r\n    let found = false;\r\n    let path = [];\r\n\r\n    while (stack.length > 0) {\r\n      let v: any = stack.pop();\r\n      let p = this.graph[v].pos;\r\n      path.push(v);\r\n\r\n      this.animator(p[0], p[1]);\r\n      await this.sleep(10);\r\n      if (v == e) {\r\n        found = true;\r\n        break;\r\n      }\r\n      if (!this.grid[p[0]][p[1]].visited) {\r\n        this.grid[p[0]][p[1]].visited = true;\r\n        this.graph[v].neighbors.forEach((n) => {\r\n          p = this.graph[n[0]].pos;\r\n          stack.push(n[0]);\r\n        });\r\n      }\r\n    }\r\n    if (found) {\r\n      this.clear();\r\n      for (const v of path) {\r\n        let x = this.graph[v].pos[0];\r\n        let y = this.graph[v].pos[1];\r\n        if (this.grid[x][y].type == 'empty' || this.grid[x][y].end) {\r\n          this.grid[x][y].color = 'yellow';\r\n          this.grid[x][y].type = 'path';\r\n          await this.sleep(20);\r\n        }\r\n      }\r\n    } else {\r\n      confirm('not connected');\r\n    }\r\n  }\r\n\r\n  private clear() {\r\n    this.grid.forEach((r: Cell[]) => {\r\n      r.forEach((c: Cell) => {\r\n        if (c.type == 'visited') {\r\n          c.color = 'white';\r\n          c.type = 'empty';\r\n          c.visited = false;\r\n          c.end = false;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private animator(x: number, y: number) {\r\n    if (this.grid[x][y].type == 'empty') {\r\n      this.grid[x][y].type = 'visited';\r\n      this.grid[x][y].color = '#4d8ab1';\r\n    }\r\n  }\r\n\r\n  private sleep(ms: number): Promise<any> {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n}\r\n","import { Cell } from '../grid/cell';\r\nimport { Node } from '../grid/node';\r\n\r\nexport class AldousBroder {\r\n  private grid: Array<Cell[]>;\r\n  private graph: Array<Node> = [];\r\n  private v: number = 0;\r\n  private cells: Cell[] = [];\r\n\r\n  constructor(grid: Array<Cell[]>) {\r\n    this.grid = grid;\r\n  }\r\n\r\n  public init() {\r\n    let id = 0;\r\n    this.graph = [];\r\n\r\n    this.grid.forEach((row: Cell[]) => {\r\n      row.forEach((c: Cell) => {\r\n        c.color = '#022335';\r\n        c.type = 'wall';\r\n        c.visited = false;\r\n      });\r\n    });\r\n\r\n    for (let i = 0; i < this.grid.length; i++) {\r\n      for (let j = 0; j < this.grid[i].length; j++) {\r\n        this.graph.push(new Node(id, [i, j]));\r\n        id++;\r\n      }\r\n    }\r\n\r\n    //determine the neighbors as well as the direction of the walls in between\r\n    //each node must be surrounded by walls\r\n    for (let i = 1; i < this.grid.length; i += 2) {\r\n      for (let j = 1; j < this.grid[i].length; j += 2) {\r\n        this.cells.push(this.grid[i][j]);\r\n        this.v++;\r\n        id = this.grid[i][j].id;\r\n        if (j - 2 >= 0) {\r\n          this.graph[id].setneighbor(this.grid[i][j - 2].id, 1, 1); //west\r\n        }\r\n\r\n        if (i - 2 >= 0) {\r\n          this.graph[id].setneighbor(this.grid[i - 2][j].id, 1, 2); //north\r\n        }\r\n\r\n        if (j + 2 < 45) {\r\n          this.graph[id].setneighbor(this.grid[i][j + 2].id, 1, 3); //east\r\n        }\r\n\r\n        if (i + 2 < 19) {\r\n          this.graph[id].setneighbor(this.grid[i + 2][j].id, 1, 4); //south\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public async generate(): Promise<any> {\r\n    let current: Cell = this.cells[this.rand(this.cells.length)];\r\n    current.visited = true;\r\n    this.v--;\r\n\r\n    while (this.v > 0) {\r\n      let n = this.neighbors(current.id);\r\n      let i: number = this.rand(n.length);\r\n      let x = n[i][0];\r\n      let y = n[i][1];\r\n      let d = n[i][2];\r\n\r\n      if (!this.grid[x][y].visited) {\r\n        current.color = 'white';\r\n        current.type = 'empty';\r\n        await this.sleep(10);\r\n\r\n        let w: Cell = this.removeWall(x, y, d);\r\n        w.color = 'white';\r\n        w.type = 'empty';\r\n        await this.sleep(10);\r\n\r\n        this.grid[x][y].color = 'white';\r\n        this.grid[x][y].type = 'empty';\r\n        this.grid[x][y].visited = true;\r\n        await this.sleep(10);\r\n        this.v--;\r\n      }\r\n      current = this.grid[x][y];\r\n    }\r\n  }\r\n\r\n  //get the neighbors if any\r\n  private neighbors(id: number): number[][] {\r\n    let x, y;\r\n    let ns: number[][] = [];\r\n    this.graph[id].neighbors.forEach((n: number[]) => {\r\n      x = this.graph[n[0]].pos[0];\r\n      y = this.graph[n[0]].pos[1];\r\n      ns.push([x, y, n[2]]);\r\n    });\r\n    return ns;\r\n  }\r\n\r\n  //get the wall between the current cell and neighbor based on the direction\r\n  private removeWall(x: number, y: number, direction: number): Cell {\r\n    let w: any;\r\n    if (direction == 1) {\r\n      w = this.grid[x][y + 1];\r\n    } else if (direction == 2) {\r\n      w = this.grid[x + 1][y];\r\n    } else if (direction == 3) {\r\n      w = this.grid[x][y - 1];\r\n    } else if (direction == 4) {\r\n      w = this.grid[x - 1][y];\r\n    }\r\n    return w;\r\n  }\r\n\r\n  private rand(x: number): number {\r\n    return Math.floor(Math.random() * x);\r\n  }\r\n\r\n  private sleep(ms: number): Promise<any> {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\nimport { Cell } from '../grid/cell';\nimport { Node } from '../grid/node';\nimport { Astar } from '../pathFindAlgos/Astar';\nimport { State } from '../globalVar';\nimport { BFS } from '../pathFindAlgos/BFS';\nimport { DFS } from '../pathFindAlgos/DFS';\nimport { UCS } from '../pathFindAlgos/UCS';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PathfindService {\n  private grid: Cell[][];\n  private graph: Node[] = [];\n\n  constructor(@Inject(Cell) grid: Cell[][]) {\n    this.grid = grid;\n  }\n\n  public chooseAlgo(o: number, graph: Node[], s: number, e: number) {\n    if (State.inProgress) {\n      return;\n    }\n    State.inProgress = true;\n    this.graph = graph;\n    let p = this.graph[e].pos;\n    this.grid[p[0]][p[1]].end = true;\n    this.grid[p[0]][p[1]].color = 'white';\n    if (o == 1) {\n      this.Astar(s, e);\n    } else if (o == 2) {\n      this.bfs(s, e);\n    } else if (o == 3) {\n      this.dfs(s, e);\n    } else if (o == 4) {\n      this.ucs(s, e);\n    }\n  }\n\n  public Astar(s: number, e: number) {\n    let astar: Astar = new Astar(this.grid, this.graph);\n    astar.Astar(s, e).then(() => {\n      State.inProgress = false;\n    });\n  }\n\n  public bfs(s: number, e: number) {\n    let bfs: BFS = new BFS(this.grid, this.graph);\n    bfs.bfs(s, e).then(() => {\n      State.inProgress = false;\n    });\n  }\n\n  public dfs(s: number, e: number) {\n    let dfs: DFS = new DFS(this.grid, this.graph);\n    dfs.dfs(s, e).then(() => {\n      State.inProgress = false;\n    });\n  }\n\n  public ucs(s: number, e: number) {\n    let ucs: UCS = new UCS(this.grid, this.graph);\n    ucs.UCS(s, e).then(() => {\n      State.inProgress = false;\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Injectable } from '@angular/core';\nimport { recursiveDivision } from '../mazeAlgos/recursiveDiv';\nimport { recBacktracker } from '../mazeAlgos/recursiveBacktracker';\nimport { randomizedPrim } from '../mazeAlgos/primsAlgorithm';\nimport { randomizedKruskal } from '../mazeAlgos/kruskalsAlgorithm';\nimport { AldousBroder } from '../mazeAlgos/AldousBroder';\nimport { Cell } from '../grid/cell';\nimport { Inject } from '@angular/core';\nimport { State } from '../globalVar';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MazesService {\n  private grid: Cell[][];\n  private prim: randomizedPrim;\n  private recDiv: recursiveDivision;\n  private recB: recBacktracker;\n  private kruskal: randomizedKruskal;\n  private aldousBroder: AldousBroder;\n\n  constructor(@Inject(Cell) grid: Cell[][]) {\n    this.grid = grid;\n    this.prim = new randomizedPrim(grid);\n    this.recDiv = new recursiveDivision(grid);\n    this.recB = new recBacktracker(grid);\n    this.kruskal = new randomizedKruskal(grid);\n    this.aldousBroder = new AldousBroder(this.grid);\n  }\n\n  public mazePicker(option: number) {\n    if (State.inProgress || State.fightR || State.type == 'f') {\n      return;\n    }\n    this.clear();\n    State.inProgress = true;\n    if (option == 1) {\n      this.recursiveDivision();\n    } else if (option == 2) {\n      this.backtracker();\n    } else if (option == 3) {\n      this.randKruskal();\n    } else if (option == 4) {\n      this.randPrim();\n    } else if (option == 5) {\n      this.alBroder();\n    }\n  }\n\n  public alBroder() {\n    this.aldousBroder.init();\n    this.aldousBroder.generate().then(() => {\n      State.inProgress = false;\n    });\n  }\n\n  public randKruskal() {\n    this.kruskal.init();\n    this.kruskal.randKruskal().then(() => {\n      State.inProgress = false;\n    });\n  }\n\n  public backtracker() {\n    this.recB.init();\n    this.recB.DFS(1, 1).then(() => {\n      State.inProgress = false;\n    });\n  }\n\n  public randPrim() {\n    this.prim.init();\n    this.prim.randPrim(1, 1).then(() => {\n      State.inProgress = false;\n    });\n  }\n\n  public recursiveDivision() {\n    this.recDiv.perimeter();\n    this.recDiv.recDiv(1, 1, 45 - 2, 19 - 2).then(() => {\n      setTimeout(() => {\n        State.inProgress = false;\n      }, 4200);\n    });\n  }\n\n  public clearPathAndPoints() {\n    if (State.inProgress || State.fightR) {\n      return;\n    }\n    State.points = [];\n    this.grid.forEach((r: Cell[]) => {\n      r.forEach((c: Cell) => {\n        if (\n          c.color == 'yellow' ||\n          c.color == 'blue' ||\n          c.type == 'visited' ||\n          c.color == 'purple' ||\n          c.end\n        ) {\n          c.color = 'white';\n          c.type = 'empty';\n          c.visited = false;\n          c.end = false;\n          c.meet = false;\n        }\n      });\n    });\n  }\n\n  public clearWalls() {\n    if (State.inProgress || State.fightR) {\n      return;\n    }\n    this.grid.forEach((r: Cell[]) => {\n      r.forEach((c: Cell) => {\n        if (c.type == 'wall') {\n          c.color = 'white';\n          c.type = 'empty';\n          c.visited = false;\n          c.end = false;\n          c.meet = false;\n        }\n      });\n    });\n  }\n\n  public clearPath() {\n    if (State.inProgress || State.fightR) {\n      return;\n    }\n    this.grid.forEach((r: Cell[]) => {\n      r.forEach((c: Cell) => {\n        if (c.color == 'yellow' && !c.end) {\n          c.color = 'white';\n          c.type = 'empty';\n        } else if (c.end && c.meet) {\n          c.color = 'white';\n          c.type = 'empty';\n        } else if (c.end) {\n          c.color = 'blue';\n          c.type = 'start';\n        }\n        c.end = false;\n        c.visited = false;\n        c.meet = false;\n      });\n    });\n  }\n\n  public clear() {\n    if (State.inProgress || State.fightR) {\n      return;\n    }\n    State.points = [];\n    this.grid.forEach((r: Cell[]) => {\n      r.forEach((c: Cell) => {\n        c.color = 'white';\n        c.type = 'empty';\n        c.visited = false;\n        c.end = false;\n        c.meet = false;\n      });\n    });\n  }\n}\n","import { Cell } from '../grid/cell';\r\nimport { Node } from '../grid/node';\r\nimport { Edge } from './edge';\r\nimport { DisjointSet } from 'dsforest';\r\n\r\nexport class randomizedKruskal {\r\n  private grid: Array<Cell[]>;\r\n  private graph: Array<Node> = [];\r\n\r\n  constructor(grid: Array<Cell[]>) {\r\n    this.grid = grid;\r\n  }\r\n\r\n  public init() {\r\n    let id = 0;\r\n    this.graph = [];\r\n\r\n    this.grid.forEach((row: Cell[]) => {\r\n      row.forEach((c: Cell) => {\r\n        c.color = '#022335';\r\n        c.type = 'wall';\r\n        c.visited = false;\r\n      });\r\n    });\r\n\r\n    for (let i = 0; i < this.grid.length; i++) {\r\n      for (let j = 0; j < this.grid[i].length; j++) {\r\n        this.graph.push(new Node(id, [i, j]));\r\n        id++;\r\n      }\r\n    }\r\n\r\n    //determine the neighbors as well as the direction of the walls in between\r\n    //each node must be surrounded by walls\r\n    for (let i = 1; i < this.grid.length; i += 2) {\r\n      for (let j = 1; j < this.grid[i].length; j += 2) {\r\n        id = this.grid[i][j].id;\r\n        if (j - 2 >= 0) {\r\n          this.graph[id].setneighbor(this.grid[i][j - 2].id, 1, 1); //west\r\n        }\r\n\r\n        if (i - 2 >= 0) {\r\n          this.graph[id].setneighbor(this.grid[i - 2][j].id, 1, 2); //north\r\n        }\r\n\r\n        if (j + 2 < 45) {\r\n          this.graph[id].setneighbor(this.grid[i][j + 2].id, 1, 3); //east\r\n        }\r\n\r\n        if (i + 2 < 19) {\r\n          this.graph[id].setneighbor(this.grid[i + 2][j].id, 1, 4); //south\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public async randKruskal(): Promise<void> {\r\n    //set with all edges in the graph\r\n    const edges: Set<Edge> = new Set<Edge>();\r\n    //subsets that consist of each node at first\r\n    const buckets: DisjointSet = new DisjointSet();\r\n\r\n    //for each node we create two edges that connect it to\r\n    //the neighhbor to the right and bellow\r\n    for (let i = 1; i < this.grid.length; i += 2) {\r\n      for (let j = 1; j < this.grid[i].length - 1; j += 2) {\r\n        buckets.makeSet(this.grid[i][j].id);\r\n        if (i + 2 < 19) {\r\n          edges.add(new Edge(this.grid[i][j], this.grid[i + 2][j]));\r\n        }\r\n        if (j + 2 < 45) {\r\n          edges.add(new Edge(this.grid[i][j], this.grid[i][j + 2]));\r\n        }\r\n      }\r\n    }\r\n\r\n    while (edges.size > 0) {\r\n      //pull out a random edge s----e\r\n      let edge: Edge = this.getRandomEdge(edges);\r\n      edges.delete(edge);\r\n\r\n      //check if the edge connects two disjoint subsets\r\n      //if yes, merge the subsets and connect the cells\r\n      if (!buckets.areConnected(edge.s.id, edge.e.id)) {\r\n        buckets.union(edge.s.id, edge.e.id);\r\n        edge.s.color = 'white';\r\n        edge.s.type = 'empty';\r\n        await this.sleep(20);\r\n        edge.e.color = 'white';\r\n        edge.e.type = 'empty';\r\n        await this.sleep(20);\r\n        this.carve(edge.s.id, edge.e.id);\r\n        await this.sleep(20);\r\n      }\r\n    }\r\n  }\r\n\r\n  //carve the passage\r\n  private carve(id1: number, id2: number) {\r\n    let pos1: number[] = this.graph[id1].pos;\r\n    let pos2: number[] = this.graph[id2].pos;\r\n    if (pos2[0] > pos1[0]) {\r\n      //wall below s\r\n      this.grid[pos1[0] + 1][pos1[1]].color = 'white';\r\n      this.grid[pos1[0] + 1][pos1[1]].type = 'empty';\r\n    } else if (pos2[1] > pos1[1]) {\r\n      //wall to the right\r\n      this.grid[pos1[0]][pos1[1] + 1].color = 'white';\r\n      this.grid[pos1[0]][pos1[1] + 1].type = 'empty';\r\n    }\r\n  }\r\n\r\n  // get a random edge from the set\r\n  private getRandomEdge(set: Set<Edge>): any {\r\n    let index = this.rand(set.size);\r\n    let cntr = 0;\r\n    for (let key of set.keys()) {\r\n      if (cntr++ === index) {\r\n        return key;\r\n      }\r\n    }\r\n  }\r\n\r\n  private rand(x: number): number {\r\n    return Math.floor(Math.random() * x);\r\n  }\r\n\r\n  private sleep(ms: number): Promise<void> {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n}\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}